/*
Виртуальные классы в C++ используются для создания иерархии классов с возможностью полиморфизма,
когда методы базового класса могут быть переопределены в производных классах.
В приведённом примере класс Shape является абстрактным, потому что он содержит чисто виртуальную
функцию getArea(), которая не имеет реализации. Классы Circle и Rectangle являются производными
от Shape и реализуют метод getArea() каждый в своем контексте. В функции main() создаются объекты
разных типов и используются указатели на базовый класс для вызова метода getArea(),
демонстрируя полиморфизм.
*/
#include <iostream>

//--------------------------------------------------------------------------------
// Классы
//--------------------------------------------------------------------------------


// Базовый абстрактный класс Shape
class Shape {
public:
    // Виртуальная функция для вычисления площади
    virtual double getArea() const = 0;

    // Виртуальный деструктор
    virtual ~Shape() {}
};

// Производный класс Circle, который наследует Shape
class Circle : public Shape {
public:
    Circle(double r) : radius(r) {}

    // Переопределение виртуальной функции для вычисления площади круга
    double getArea() const override {
        return 3.14 * radius * radius;
    }

private:
    double radius;
};

// Производный класс Rectangle, который наследует Shape
class Rectangle : public Shape {
public:
    Rectangle(double l, double w) : length(l), width(w) {}

    // Переопределение виртуальной функции для вычисления площади прямоугольника
    double getArea() const override {
        return length * width;
    }

private:
    double length;
    double width;
};


//--------------------------------------------------------------------------------
// Главная программа
//--------------------------------------------------------------------------------

int main(int argc, char *argv[])
{
    int A = 0;
    //--------------------------------------------------------------------------------
    // Создание объектов разных типов
    Circle circle(5);
    Rectangle rectangle(4, 6);

    // Использование указателя на базовый класс для вызова метода
    Shape* shape1 = &circle;
    Shape* shape2 = &rectangle;

    // Вычисление и вывод площадей
    std::cout << "Area of the circle: " << shape1->getArea() << std::endl;
    std::cout << "Area of the rectangle: " << shape2->getArea() << std::endl;

    //--------------------------------------------------------------------------------
    return A;
}

